{"version":3,"sources":["../source/TextInput.js"],"names":["Text_input","state","autoresize","event","props","measurements","element","target","findDOMNode","input","style","height","scrollHeight","extra_height","Math","max","initial_height","ceil","on_window_resize","on_change","value","undefined","onChange","previous_value","on_key_down","onKeyDown","ctrlKey","metaKey","keyCode","preventDefault","multiline","fallback","window","addEventListener","setState","javascript","removeEventListener","id","name","placeholder","label","labelStyle","disabled","required","floatingLabel","className","label_floats","markup","render_input","should_indicate_invalid","is_empty","render_error_message","render_static","options","ref","focus","inputStyle","rows","cols","tabIndex","onFocus","onBlur","input_style","resize","properties","autoFocus","type","get_input_type","error","email","password","trim","indicateInvalid","autoresize_measure","measure","propTypes","string","oneOfType","number","func","isRequired","bool","object","defaultProps","getComputedStyle","parseInt","borderTopWidth","borderBottomWidth","non_rounded_initial_height","getBoundingClientRect"],"mappings":"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","file":"TextInput.js","sourcesContent":["import React, { PureComponent, createElement } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ReactDOM from 'react-dom'\r\nimport classNames from 'classnames'\r\nimport throttle from 'lodash/throttle'\r\n\r\nimport { submit_parent_form } from './utility/dom'\r\nimport { get_modular_grid_unit } from './utility/grid'\r\n\r\nexport default class Text_input extends PureComponent\r\n{\r\n\tstate = {}\r\n\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// Text field label\r\n\t\tlabel            : PropTypes.string,\r\n\r\n\t\t// HTML form input `name` attribute\r\n\t\tname             : PropTypes.string,\r\n\r\n\t\t// Text field value\r\n\t\tvalue            : PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n\t\t// Is called when the `value` is edited\r\n\t\tonChange         : PropTypes.func.isRequired,\r\n\r\n\t\t// Disables the text field\r\n\t\tdisabled         : PropTypes.bool,\r\n\r\n\t\t// Renders an error message below the `<input/>`\r\n\t\terror            : PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n\r\n\t\t// If this flag is `true` then the `error` is shown.\r\n\t\t// If this flag is `false` then the `error` is not shown (even if passed).\r\n\t\tindicateInvalid  : PropTypes.bool,\r\n\r\n\t\t// Set to `true` to mark the field as required\r\n\t\trequired         : PropTypes.bool.isRequired,\r\n\r\n\t\t// `<input/>` placeholder\r\n\t\tplaceholder      : PropTypes.string,\r\n\r\n\t\t// Set to `false` to prevent the `<label/>` from floating\r\n\t\tfloatingLabel    : PropTypes.bool.isRequired,\r\n\r\n\t\t// `<textarea/>` instead of an `<input type=\"text\"/>`\r\n\t\tmultiline        : PropTypes.bool,\r\n\r\n\t\t// Sets HTML input `type` attribute to `email`\r\n\t\temail            : PropTypes.bool,\r\n\r\n\t\t// Sets HTML input `type` attribute to `password`\r\n\t\tpassword         : PropTypes.bool,\r\n\r\n\t\t// A manually specified `type` attribute\r\n\t\ttype             : PropTypes.string.isRequired,\r\n\r\n\t\t// Whether `<textarea/>` should autoresize itself\r\n\t\t// (is `true` by default)\r\n\t\tautoresize       : PropTypes.bool.isRequired,\r\n\r\n\t\t// Autofocuses the input field\r\n\t\tfocus            : PropTypes.bool,\r\n\r\n\t\t// HTML `tabindex` attribute\r\n\t\ttabIndex         : PropTypes.number,\r\n\r\n\t\t// `<textarea/>` `rows` attribute (row count, i.e. height)\r\n\t\trows             : PropTypes.number,\r\n\r\n\t\t// `<textarea/>` `cols` attribute (column count, i.e. width)\r\n\t\tcols             : PropTypes.number,\r\n\r\n\t\t// A custom `input` component can be passed\r\n\t\tinput            : PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired,\r\n\r\n\t\t// (exotic use case)\r\n\t\t// Falls back to a plain HTML input\r\n\t\t// when javascript is disabled (e.g. Tor)\r\n\t\tfallback         : PropTypes.bool.isRequired,\r\n\r\n\t\t// Is called when the input is focused\r\n\t\tonFocus          : PropTypes.func,\r\n\r\n\t\t// `onKeyDown` event handler\r\n\t\tonKeyDown        : PropTypes.func,\r\n\r\n\t\t// Is called when the input is blurred\r\n\t\tonBlur           : PropTypes.func,\r\n\r\n\t\t// CSS style object\r\n\t\tstyle            : PropTypes.object,\r\n\r\n\t\t// CSS name\r\n\t\tclassName        : PropTypes.string,\r\n\r\n\t\t// CSS style object for `<input/>`\r\n\t\tinputStyle       : PropTypes.object,\r\n\r\n\t\t// CSS style object for the label\r\n\t\tlabelStyle       : PropTypes.object\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t// HTML input `type` attribute\r\n\t\ttype : 'text',\r\n\r\n\t\t// `<textarea/>` should autoresize itself\r\n\t\tautoresize : true,\r\n\r\n\t\t// Set to `false` to prevent the `<label/>` from floating\r\n\t\tfloatingLabel : true,\r\n\r\n\t\t// Javascriptless users support (e.g. Tor)\r\n\t\tfallback : false,\r\n\r\n\t\t// Set to `true` to mark the field as required\r\n\t\trequired : false,\r\n\r\n\t\t// Render an `<input/>` by default\r\n\t\tinput: 'input'\r\n\t}\r\n\r\n\t// Client side rendering, javascript is enabled\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tconst { multiline, fallback, value, autoresize } = this.props\r\n\r\n\t\t// Doing `this.measure()` here now\r\n\t\t// because `<textarea/>` should autoresize\r\n\t\t// in case its `value` is set up front.\r\n\t\t// // Not doing `this.measure()` here because\r\n\t\t// // that resulted in weird `<textarea/>` height mismatch.\r\n\t\t// // Measuring the height of `<textarea/>` during\r\n\t\t// // the first `this.measurements()` call instead.\r\n\r\n\t\tif (value && autoresize)\r\n\t\t{\r\n\t\t\tthis.autoresize()\r\n\t\t}\r\n\r\n\t\tif (multiline)\r\n\t\t{\r\n\t\t\twindow.addEventListener('resize', this.on_window_resize)\r\n\t\t}\r\n\r\n\t\tif (fallback)\r\n\t\t{\r\n\t\t\tthis.setState({ javascript: true })\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount()\r\n\t{\r\n\t\tconst { multiline } = this.props\r\n\r\n\t\tif (multiline)\r\n\t\t{\r\n\t\t\twindow.removeEventListener('resize', this.on_window_resize)\r\n\t\t}\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tid,\r\n\t\t\tname,\r\n\t\t\tvalue,\r\n\t\t\tplaceholder,\r\n\t\t\tlabel,\r\n\t\t\tlabelStyle,\r\n\t\t\tmultiline,\r\n\t\t\tfallback,\r\n\t\t\tdisabled,\r\n\t\t\trequired,\r\n\t\t\tfloatingLabel,\r\n\t\t\tstyle,\r\n\t\t\tclassName\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst label_floats = placeholder === undefined && floatingLabel\r\n\r\n\t\tconst markup =\r\n\t\t(\r\n\t\t\t<div\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames\r\n\t\t\t\t(\r\n\t\t\t\t\t'rrui__text-input',\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'rrui__rich' : fallback\r\n\t\t\t\t\t},\r\n\t\t\t\t\tclassName\r\n\t\t\t\t) }>\r\n\r\n\t\t\t\t{/* `<input/>` and its `<label/>` */}\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={ classNames('rrui__input',\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'rrui__input--multiline' : multiline,\r\n\t\t\t\t\t}) }>\r\n\r\n\t\t\t\t\t{/* `<input/>` */}\r\n\t\t\t\t\t{ this.render_input({ name: false }) }\r\n\r\n\t\t\t\t\t{/* Input `<label/>`. */}\r\n\t\t\t\t\t{/* It is rendered after the input to utilize the\r\n\t\t\t\t       `input:focus + label` CSS selector rule */}\r\n\t\t\t\t\t{ label &&\r\n\t\t\t\t\t\t<label\r\n\t\t\t\t\t\t\thtmlFor={ id }\r\n\t\t\t\t\t\t\tclassName={ classNames('rrui__input-label',\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// CSS selector performance optimization\r\n\t\t\t\t\t\t\t\t'rrui__input-label--invalid'           : this.should_indicate_invalid(),\r\n\t\t\t\t\t\t\t\t'rrui__input-label--floating'          : label_floats,\r\n\t\t\t\t\t\t\t\t'rrui__input-label--required'          : required && this.is_empty(),\r\n\t\t\t\t\t\t\t\t'rrui__text-input__label--placeholder' : label_floats && this.is_empty()\r\n\t\t\t\t\t\t\t}) }\r\n\t\t\t\t\t\t\tstyle={ labelStyle }>\r\n\t\t\t\t\t\t\t{ label }\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Error message */}\r\n\t\t\t\t{ this.should_indicate_invalid() && this.render_error_message() }\r\n\r\n\t\t\t\t{/* Fallback in case javascript is disabled (no animated <label/>) */}\r\n\t\t\t\t{ fallback && !this.state.javascript && this.render_static() }\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n\t\treturn markup\r\n\t}\r\n\r\n\trender_input(options = {})\r\n\t{\r\n\t\tconst { placeholder, ref, name } = options\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tvalue,\r\n\t\t\tmultiline,\r\n\t\t\tfocus,\r\n\t\t\tonChange,\r\n\t\t\tdisabled,\r\n\t\t\tinputStyle,\r\n\t\t\trows,\r\n\t\t\tcols,\r\n\t\t\ttabIndex,\r\n\t\t\tautoresize,\r\n\r\n\t\t\t// A custom input component\r\n\t\t\t// (e.g. for an `input-format` text input, like a phone number)\r\n\t\t\tinput,\r\n\r\n\t\t\t// Passthrough properties\r\n\t\t\tid,\r\n\t\t\tonFocus,\r\n\t\t\tonBlur\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tlet input_style = inputStyle\r\n\r\n\t\tif (multiline && autoresize)\r\n\t\t{\r\n\t\t\tinput_style =\r\n\t\t\t{\r\n\t\t\t\tresize : 'none',\r\n\t\t\t\t...inputStyle\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst properties =\r\n\t\t{\r\n\t\t\tid,\r\n\t\t\tname        : name === false ? undefined : this.props.name,\r\n\t\t\tref         : ref === false ? undefined : ref => this.input = ref,\r\n\t\t\tvalue       : (value === undefined || value === null) ? '' : value,\r\n\t\t\tplaceholder : placeholder || this.props.placeholder,\r\n\t\t\tonChange    : this.on_change,\r\n\t\t\tonKeyDown   : this.on_key_down,\r\n\t\t\tonFocus,\r\n\t\t\tonBlur,\r\n\t\t\tdisabled,\r\n\t\t\tclassName   : classNames\r\n\t\t\t(\r\n\t\t\t\t'rrui__input-element',\r\n\t\t\t\t'rrui__input-field',\r\n\t\t\t\t{\r\n\t\t\t\t\t// CSS selector performance optimization\r\n\t\t\t\t\t'rrui__input-field--invalid'   : this.should_indicate_invalid(),\r\n\t\t\t\t\t'rrui__input-field--disabled'  : disabled,\r\n\t\t\t\t\t'rrui__input-field--multiline' : multiline\r\n\t\t\t\t}\r\n\t\t\t),\r\n\t\t\tstyle       : input_style,\r\n\t\t\tautoFocus   : focus,\r\n\t\t\ttabIndex\r\n\t\t}\r\n\r\n\t\t// In case of `multiline` set to `true`\r\n\t\t// this is gonna be a `<textarea/>`\r\n\t\tif (multiline)\r\n\t\t{\r\n\t\t\t// \"keyup\" is required for IE to properly reset height when deleting text\r\n\t\t\treturn <textarea\r\n\t\t\t\trows={ rows }\r\n\t\t\t\tcols={ cols }\r\n\t\t\t\tonInput={ this.autoresize }\r\n\t\t\t\tonKeyUp={ this.autoresize }\r\n\t\t\t\t{ ...properties }/>\r\n\t\t}\r\n\r\n\t\t// Add `<input/>` `type` to properties\r\n\t\tproperties.type = this.get_input_type()\r\n\r\n\t\t// If a custom `input` component was passed then use it.\r\n\t\t// Otherwise use a simple `<input/>`.\r\n\t\treturn createElement(input, properties)\r\n\t}\r\n\r\n\trender_error_message()\r\n\t{\r\n\t\tconst { error } = this.props\r\n\r\n\t\treturn <div className=\"rrui__input-error\">{ error }</div>\r\n\t}\r\n\r\n\t// Fallback in case javascript is disabled (no animated <label/>)\r\n\trender_static()\r\n\t{\r\n\t\tconst { label } = this.props\r\n\r\n\t\tconst markup =\r\n\t\t(\r\n\t\t\t<div className=\"rrui__rich__fallback\">\r\n\t\t\t\t{/* <input/> */}\r\n\t\t\t\t{ this.render_input({ placeholder: label, ref: false }) }\r\n\r\n\t\t\t\t{/* Error message */}\r\n\t\t\t\t{ this.should_indicate_invalid() && this.render_error_message() }\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n\t\treturn markup\r\n\t}\r\n\r\n\t// \"text\", \"email\", \"password\", etc\r\n\tget_input_type()\r\n\t{\r\n\t\tconst { type, email, password } = this.props\r\n\r\n\t\tif (email)\r\n\t\t{\r\n\t\t\treturn 'email'\r\n\t\t}\r\n\r\n\t\tif (password)\r\n\t\t{\r\n\t\t\treturn 'password'\r\n\t\t}\r\n\r\n\t\treturn type\r\n\t}\r\n\r\n\t// Whether the input is empty\r\n\tis_empty()\r\n\t{\r\n\t\tconst { value } = this.props\r\n\r\n\t\t// `0` is not an empty value\r\n\t\tif (typeof value === 'number' && value === 0)\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\t// An empty string, `undefined`, `null` –\r\n\t\t// all those are an empty value.\r\n\t\tif (!value)\r\n\t\t{\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// Whitespace string is also considered empty\r\n\t\tif (typeof value === 'string' && !value.trim())\r\n\t\t{\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// Not empty\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Whether should indicate that the input value is invalid\r\n\tshould_indicate_invalid()\r\n\t{\r\n\t\tconst { indicateInvalid, error } = this.props\r\n\r\n\t\treturn indicateInvalid && error\r\n\t}\r\n\r\n\tautoresize = (event) =>\r\n\t{\r\n\t\tconst { autoresize } = this.props\r\n\r\n\t\tif (!autoresize)\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst measurements = this.measurements()\r\n\t\tconst element = event ? event.target : ReactDOM.findDOMNode(this.input)\r\n\r\n\t\telement.style.height = 0\r\n\r\n\t\t// `element.scrollHeight` is always an integer\r\n\t\t// so it doesn't need rounding (e.g. `em`s).\r\n\t\tlet height = element.scrollHeight + measurements.extra_height\r\n\t\theight = Math.max(height, measurements.initial_height)\r\n\r\n\t\tif (get_modular_grid_unit() && height % get_modular_grid_unit())\r\n\t\t{\r\n\t\t\theight = Math.ceil(height / get_modular_grid_unit()) * get_modular_grid_unit()\r\n\t\t}\r\n\r\n\t\t// For some reason Chrome on Windows 10\r\n\t\t// requires an extra pixel been added\r\n\t\t// to avoid showing vertical scrollbar.\r\n\t\t// (Jan 11, 2018)\r\n\t\tif (height > measurements.initial_height)\r\n\t\t{\r\n\t\t\theight += 1\r\n\t\t}\r\n\r\n\t\telement.style.height = height + 'px'\r\n\t}\r\n\r\n\ton_window_resize = throttle((event) =>\r\n\t{\r\n\t\tthis.autoresize()\r\n\t}, 100)\r\n\r\n\t// The underlying `input` component\r\n\t// can pass both `event`s and `value`s\r\n\t// to this parent `onChange` listener.\r\n\ton_change = (event) =>\r\n\t{\r\n\t\t// Extract `value` from the argument\r\n\t\t// of this `onChange` listener\r\n\t\t// (for convenience)\r\n\r\n\t\tlet value = event\r\n\r\n\t\tif (event.target !== undefined)\r\n\t\t{\r\n\t\t\tvalue = event.target.value\r\n\t\t}\r\n\r\n\t\t// Call the parent `onChange` handler\r\n\t\t// with the `value` as an argument\r\n\t\t// (for convenience)\r\n\r\n\t\tconst { onChange, value: previous_value } = this.props\r\n\r\n\t\t// Call `onChange` only if `value` did actually change\r\n\t\tif (value !== previous_value)\r\n\t\t{\r\n\t\t\tonChange(value)\r\n\t\t}\r\n\t}\r\n\r\n\ton_key_down = (event) =>\r\n\t{\r\n\t\tconst { onKeyDown } = this.props\r\n\r\n\t\t// Submit the form on Cmd + Enter (or Ctrl + Enter)\r\n\t\tif ((event.ctrlKey || event.metaKey) && event.keyCode === 13)\r\n\t\t{\r\n\t\t\tif (submit_parent_form(ReactDOM.findDOMNode(this.input)))\r\n\t\t\t{\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (onKeyDown)\r\n\t\t{\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t}\r\n\r\n\tfocus()\r\n\t{\r\n\t\tconst { input } = this.props\r\n\r\n\t\t// For simple DOM nodes like `<input/>`\r\n\t\t// just focus on them.\r\n\t\tif (typeof input === 'string') {\r\n\t\t\treturn ReactDOM.findDOMNode(this.input).focus()\r\n\t\t}\r\n\r\n\t\t// For custom components call `.focus()` on them\r\n\t\t// (if available)\r\n\t\treturn this.input.focus && this.input.focus()\r\n\t}\r\n\r\n\tmeasure()\r\n\t{\r\n\t\treturn autoresize_measure(ReactDOM.findDOMNode(this.input))\r\n\t}\r\n\r\n\tmeasurements()\r\n\t{\r\n\t\tlet measurements = this.state.autoresize\r\n\r\n\t\t// If it's the first time accessing measurements,\r\n\t\t// or if the textarea was initially hidden\r\n\t\t// (like `display: none` for a mobile-oriented responsive design)\r\n\t\t// then make the initial measurements now.\r\n\t\tif (!measurements || !measurements.initial_height)\r\n\t\t{\r\n\t\t\tmeasurements = this.measure()\r\n\r\n\t\t\t// If the `<textarea/>` is not hidden (e.g. via `display: none`)\r\n\t\t\t// then keep its initial (minimum) height\r\n\t\t\t// so that it doesn't shrink below this value\r\n\t\t\tif (measurements.initial_height)\r\n\t\t\t{\r\n\t\t\t\tthis.setState({ autoresize: measurements })\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn measurements\r\n\t}\r\n}\r\n\r\n// <textarea/> autoresize (without ghost elements)\r\n// https://github.com/javierjulio/textarea-autosize/blob/master/src/jquery.textarea_autosize.js\r\nfunction autoresize_measure(element)\r\n{\r\n\tconst style = window.getComputedStyle(element)\r\n\r\n\t// Borders extra height, because `.scrollHeight` doesn't include borders.\r\n\tconst extra_height =\r\n\t\tparseInt(style.borderTopWidth) +\r\n\t\tparseInt(style.borderBottomWidth)\r\n\r\n\t// `<textarea/>`'s height is a float when using `em`, `rem`, `pt`, etc.\r\n\tconst non_rounded_initial_height = element.getBoundingClientRect().height\r\n\tconst initial_height = Math.ceil(non_rounded_initial_height)\r\n\r\n\t// Round the height of `<textarea/>` so that it doesn't jump\r\n\t// when autoresizing while typing for the first time.\r\n\tif (initial_height !== non_rounded_initial_height)\r\n\t{\r\n\t\telement.style.height = initial_height + 'px'\r\n\t}\r\n\r\n\treturn { extra_height, initial_height }\r\n}\r\n"]}